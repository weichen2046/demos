// IAidlParameters.aidl
package com.example.chenwei.debugaidlparameters;

import com.example.chenwei.debugaidlparameters.IDummy;
import com.example.chenwei.debugaidlparameters.MyParcelable;

// Declare any non-default types here with import statements

interface IAidlParameters {

    // Primitive type

    /**
     * Basic types of Java programming language can be use as parameter types
     * and return types.
     */
    int useBasicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,
            double aDouble, String aString);

    /**
     * Won't compile if use unspported boxed types of primitive types.
     */
    //void boxedTypes(Long anBoxedLong);
    //Integer returnBoxedTypes();

    // IBinder type

    /**
     * IBinder type used as parameter type and return type.
     */
    IBinder useIBinderType(IBinder binder);

    // Parcelable type

    /**
     * Interfaces generated by other aidl files can be used as parameter and return type.
     *
     * Note: you should explicitly import the interface even if they are in the same package.
     */
    IDummy useInterfaceType(IDummy dummyInterface);

    /**
     * Parcelable type used as parameter type and return type.
     *
     * Note:
     *   - you should explicitly import the parcelable class
     *   - you should explicitly define the direction of the parameter
     */
    MyParcelable useParcelableType(in MyParcelable parcelableObj);

    // List type

    /**
     * List type used as parameter type or return type.
     *
     * Note:
     *   - you should explicitly define the direction of the parameter
     *   - your should use concrete type as T with List<T> when use as parameter, but return type
     *     exempt from this limitation
     *   - primitive type or it's boxed type can not use with List<T>
     *   - T in List<T> can not be List type
     */
    List useListType(in List<String> strings);
    List<String> useListType2(in List<String> strings);
    List useListTypeParcelable(in List<MyParcelable> parcelables);
    List<MyParcelable> useListTypeParcelable2(in List<MyParcelable> parcelables);
    List useListTypeIBinder(in List<IBinder> binders);
    List<IBinder> useListTypeIBinder2(in List<IBinder> binders);

    // The following method signatures won't compile
    //List useListType1(in List listObj);
    //void useListType2(in List<int> integers);
    //void useListType3(in List<Integer> integers);
    //List useListType4(in List<List<String>> strings);
    //List<List<String>> useListType5(in List<List<String>> strings);

    // Map type

    /**
     * Map type used as parameter type or return type.
     *
     * Note:
     *   - you should explicitly define the direction of the parameter
     *   - unlike List type, you can not use Map type as parameter type and return type the same time
     *   - can not use Map<K, V> as parameter type or return type, only Map can use
     */
    void useMapTypeAsParameterType(in Map maps);
    Map useMapTypeAsReturnType();

    // The following method signatures won't compile
    //Map useMapType3(in Map maps);
    //void useMapTypeAsParameterType2(in Map<String, String> maps);
    //Map<String, String> useMapTypeAsReturnType2();
}
